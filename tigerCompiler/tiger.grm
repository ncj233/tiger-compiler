%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	
	int ival;
	string sval;
	
	A_var var;
	A_exp exp;
	A_dec dec;
	A_ty ty;
	A_field field;
	A_fieldList fieldList;
	A_expList expList;
	A_fundec fundec;
	A_fundecList fundecList;
	A_decList decList;
	A_namety namety;
	A_nametyList nametyList;
	A_efield efield;
	A_efieldList efieldList;
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  PLUS MINUS TIMES DIVIDE EQ NEQ LT LE GT GE
  AND OR ASSIGN
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE UMINUS LOWER ARRAY_DEFINE

%nonassoc LOWER
%nonassoc TYPE VAR FUNCTION
%nonassoc THEN WHILE FOR ARRAY_DEFINE
%left ELSE
%right ASSIGN
%left OR
%left AND
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%type <var> lvalue
%type <exp> exp program
%type <dec> dec vardec
%type <ty> ty
%type <field> tyfield
%type <fieldList> tyfields
%type <expList> expseq paras
%type <fundec> fundec
%type <fundecList> fundecList
%type <decList> decs
%type <namety> tydec
%type <nametyList> tydecList
%type <efield> record
%type <efieldList> records
/* et cetera */

%start program

%%

program:   exp    {absyn_root = $1;}

decs: dec decs {$$ = A_DecList($1, $2);}
decs: {$$=NULL;}

dec: tydecList {$$ = A_TypeDec(EM_tokPos, $1);}
dec: vardec {$$ = $1}
dec: fundecList {$$ = A_FunctionDec(EM_tokPos, $1);}

tydecList: tydec tydecList {$$ = A_NametyList($1, $2);}
tydecList: tydec %prec LOWER {$$ = A_NametyList($1, NULL);}
tydec: TYPE ID EQ ty {$$ = A_Namety(S_Symbol($2), $4);}

ty: ID {$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
ty: LBRACE tyfields RBRACE {$$ = A_RecordTy(EM_tokPos, $2);}
ty: ARRAY OF ID {$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}

tyfields: tyfield COMMA tyfields {$$ = A_FieldList($1, $3);}
tyfields: tyfield {$$ = A_FieldList($1, NULL);}
tyfields: {$$ = NULL;}
tyfield: ID COLON ID {$$ = A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3));}

vardec: VAR ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
vardec: VAR ID COLON ID ASSIGN exp {$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

fundecList: fundec fundecList {$$ = A_FundecList($1, $2);}
fundecList: fundec %prec LOWER {$$ = A_FundecList($1, NULL);}
fundec: FUNCTION ID LPAREN tyfields RPAREN EQ exp {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
fundec: FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp {$$ = A_Fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol($7), $9);}

lvalue: ID DOT ID {$$ = A_FieldVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), S_Symbol($3));}
lvalue: lvalue DOT ID {$$ = A_FieldVar(EM_tokPos, $1, S_Symbol($3));}
lvalue: ID LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}
lvalue: lvalue LBRACK exp RBRACK {$$ = A_SubscriptVar(EM_tokPos, $1, $3);}

exp: LET decs IN expseq END {$$ = A_LetExp(EM_tokPos, $2, A_SeqExp(EM_tokPos, $4));}
exp: NIL {$$ = A_NilExp(EM_tokPos);}
exp: INT {$$ = A_IntExp(EM_tokPos, $1);}
exp: STRING {$$ = A_StringExp(EM_tokPos, $1);}
exp: lvalue {$$ = A_VarExp(EM_tokPos, $1);}
exp: ID {$$ = A_VarExp(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)));}
exp: exp PLUS exp {$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
exp: exp MINUS exp {$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
exp: exp TIMES exp {$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
exp: exp DIVIDE exp {$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
exp: exp EQ exp {$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
exp: exp NEQ exp {$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
exp: exp LT exp {$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
exp: exp LE exp {$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
exp: exp GT exp {$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
exp: exp GE exp {$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
exp: exp AND exp {$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 0));}
exp: exp OR exp {$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 1), $3);}
exp: MINUS exp %prec UMINUS {$$ = A_OpExp(EM_tokPos, A_minusOp, A_IntExp(EM_tokPos, 0), $2);}
exp: ID LBRACK exp RBRACK OF exp %prec ARRAY_DEFINE {$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $6);}
exp: lvalue ASSIGN exp {$$ = A_AssignExp(EM_tokPos, $1, $3);}
exp: ID ASSIGN exp {$$ = A_AssignExp(EM_tokPos, A_SimpleVar(EM_tokPos, S_Symbol($1)), $3);}
exp: WHILE exp DO exp %prec WHILE {$$ = A_WhileExp(EM_tokPos, $2, $4);}
exp: FOR ID ASSIGN exp TO exp DO exp %prec FOR {$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}
exp: BREAK {$$ = A_BreakExp(EM_tokPos);}
exp: LPAREN expseq RPAREN {$$ = A_SeqExp(EM_tokPos, $2);}
exp: ID LPAREN paras RPAREN {$$ = A_CallExp(EM_tokPos, S_Symbol($1), $3);}
exp: ID LBRACE records RBRACE {$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}
exp: IF exp THEN exp ELSE exp {$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
exp: IF exp THEN exp {$$ = A_IfExp(EM_tokPos, $2, $4, NULL);}

records: record COMMA records {$$ = A_EfieldList($1, $3);}
records: record {$$ = A_EfieldList($1, NULL);}
records: {$$ = NULL;}
record: ID EQ exp {$$ = A_Efield(S_Symbol($1), $3);}


expseq: exp SEMICOLON expseq {$$ = A_ExpList($1, $3);}
expseq: exp {$$ = A_ExpList($1, NULL);}
expseq: {$$ = NULL;}

paras: exp COMMA paras {$$ = A_ExpList($1, $3);}
paras: exp {$$ = A_ExpList($1, NULL);}
paras: {$$ = NULL;}
